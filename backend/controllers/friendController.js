import Friend from '../models/Friend.js';
import User from '../models/User.js';

// Th√™m b·∫°n b√®
export const addFriend = async (req, res) => {
    try {
        const { friendId } = req.body;
        const userId = req.user.id;

        console.log(`üë• Adding friend: ${userId} -> ${friendId}`);

        // Ki·ªÉm tra kh√¥ng th·ªÉ add ch√≠nh m√¨nh
        if (userId === friendId) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ th√™m ch√≠nh m√¨nh l√†m b·∫°n b√®'
            });
        }

        // Ki·ªÉm tra friend c√≥ t·ªìn t·∫°i kh√¥ng
        const friendUser = await User.findById(friendId);
        if (!friendUser) {
            return res.status(404).json({
                success: false,
                message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'
            });
        }

        // Ki·ªÉm tra ƒë√£ l√† b·∫°n b√® ch∆∞a
        const existingFriend = await Friend.findOne({
            user: userId,
            friend: friendId
        });

        if (existingFriend) {
            return res.status(400).json({
                success: false,
                message: 'ƒê√£ l√† b·∫°n b√® r·ªìi'
            });
        }

        // T·∫°o m·ªëi quan h·ªá b·∫°n b√® (2 chi·ªÅu)
        await Friend.create([
            { user: userId, friend: friendId },
            { user: friendId, friend: userId }
        ]);

        console.log(`‚úÖ Friend relationship created: ${userId} <-> ${friendId}`);

        res.json({
            success: true,
            message: 'ƒê√£ th√™m b·∫°n b√® th√†nh c√¥ng',
            friend: friendUser
        });

    } catch (error) {
        console.error('‚ùå L·ªói th√™m b·∫°n b√®:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server'
        });
    }
};

// L·∫•y danh s√°ch b·∫°n b√®
export const getFriends = async (req, res) => {
    try {
        const userId = req.user.id;

        console.log(`üìã Getting friends for user: ${userId}`);

        const friends = await Friend.find({ user: userId })
            .populate('friend', 'firstName lastName username email avatar location occupation')
            .sort({ createdAt: -1 });

        const friendsList = friends.map(f => f.friend);

        console.log(`üìä Found ${friendsList.length} friends`);

        res.json({
            success: true,
            friends: friendsList
        });

    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y danh s√°ch b·∫°n b√®:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server'
        });
    }
};

// X√≥a b·∫°n b√®
export const removeFriend = async (req, res) => {
    try {
        const { friendId } = req.params;
        const userId = req.user.id;

        console.log(`üíî Removing friend: ${userId} -> ${friendId}`);

        // X√≥a m·ªëi quan h·ªá b·∫°n b√® (2 chi·ªÅu)
        await Friend.deleteMany({
            $or: [
                { user: userId, friend: friendId },
                { user: friendId, friend: userId }
            ]
        });

        console.log(`‚úÖ Friend relationship removed: ${userId} <-> ${friendId}`);

        res.json({
            success: true,
            message: 'ƒê√£ x√≥a b·∫°n b√® th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå L·ªói x√≥a b·∫°n b√®:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server'
        });
    }
};

// Ki·ªÉm tra c√≥ ph·∫£i b·∫°n b√® kh√¥ng
export const checkFriendship = async (req, res) => {
    try {
        const { friendId } = req.params;
        const userId = req.user.id;

        const friendship = await Friend.findOne({
            user: userId,
            friend: friendId
        });

        res.json({
            success: true,
            isFriend: !!friendship
        });

    } catch (error) {
        console.error('‚ùå L·ªói ki·ªÉm tra b·∫°n b√®:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server'
        });
    }
};
